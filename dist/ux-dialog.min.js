/*
 MIT License. 
 ux-dialog v0.1.4
 author: uiwwsw
 homepage:https://github.com/uiwwsw/ux-dialog#readme
 */ "use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}var defaultText={confirm:"확인",cancel:"취소"},contentsType={confirm:"boolean",cancel:"boolean",title:"string",content:"string",callback:"function",text:"string",selfClose:"number"},UxDialog=function(){function c(e){_classCallCheck(this,c),this.getDefaultContents(e||{})}return _createClass(c,[{key:"checkType",value:function(e){var c=this;Object.entries(e).map(function(e){var t=e[0],n=e[1];if("object"===_typeof(n))c.checkType(n);else{var o=contentsType[t];if(_typeof(n)!==o)throw"".concat(n,"는 ").concat(o,"이 아닙니다.")}})}},{key:"makeNode",value:function(e){var t="",n="";e.confirm&&(t='<button name="confirm" type="button">'.concat(e.confirm.text||defaultText.confirm,"</button>")),e.cancel&&(n='<button name="cancel" type="button">'.concat(e.cancel.text||defaultText.cancel,"</button>"));var o='\n          <div class="ux-dialog">\n            <div class="ux-dialog--content">\n              <button type="button" class="ux-dialog--close">this dialog close</button>\n              <div class="ux-dialog--header">'.concat(e.title,'</div>\n              <div class="ux-dialog--container">').concat(e.content,'</div>\n              <div class="ux-dialog--footer">').concat(t).concat(n,'</div>\n              <i class="ux-dialog--loading"></i>\n            </div>\n            <i class="ux-dialog--dim"></i>\n          </div>\n        ');return c.htmlToElement(o)}},{key:"append",value:function(e){var t=document.body;this.element=this.makeNode(e),t.appendChild(this.element)}},{key:"getDefaultContents",value:function(e){var t=this;this.checkType(e),this.element=null,this.contents={},Object.entries(e).map(function(e){t.contents[e[0]]=e[1]})}},{key:"bindEvent",value:function(t){var n=this;this.element.querySelector(".ux-dialog--close").onclick=function(){n.close()},this.element.querySelector(".ux-dialog--footer").onclick=function(e){switch(e.target.name){case"confirm":t.confirm.callback&&t.confirm.callback();break;case"cancel":t.cancel.callback&&t.cancel.callback(),n.close()}}}},{key:"open",value:function(e){var o=this;if(null===this.element){var c=Object.assign({},this.contents);e&&(this.checkType(e),Object.entries(e).map(function(e){var t=e[0],n=e[1];o.contents[t]!==n&&(c[t]=n)})),this.append(c),this.bindEvent(c),c.selfClose&&(this.element.querySelector(".ux-dialog--loading").style.animationDuration=c.selfClose/1e3+"s",setTimeout(function(){o.close()},c.selfClose))}}},{key:"close",value:function(){var e=this.element;e&&(e.classList.add("close"),e.querySelector(".ux-dialog--dim").addEventListener("animationend",function(){e.remove()}),this.element=null)}}],[{key:"htmlToElement",value:function(e){var t=document.createElement("template");return e=e.trim(),t.innerHTML=e,t.content.firstChild}}]),c}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbImRlZmF1bHRUZXh0IiwiY29uZmlybSIsImNhbmNlbCIsImNvbnRlbnRzVHlwZSIsInRpdGxlIiwiY29udGVudCIsImNhbGxiYWNrIiwidGV4dCIsInNlbGZDbG9zZSIsIlV4RGlhbG9nIiwiY29udGVudHMiLCJfY2xhc3NDYWxsQ2hlY2siLCJ0aGlzIiwiZ2V0RGVmYXVsdENvbnRlbnRzIiwib2JqZWN0IiwiX3RoaXMiLCJPYmplY3QiLCJlbnRyaWVzIiwibWFwIiwidmFsIiwia2V5IiwidmFsdWUiLCJfdHlwZW9mIiwiY2hlY2tUeXBlIiwidHlwZSIsImNvbmNhdCIsImRpYWxvZyIsImh0bWxUb0VsZW1lbnQiLCJib2R5IiwiZG9jdW1lbnQiLCJlbGVtZW50IiwibWFrZU5vZGUiLCJhcHBlbmRDaGlsZCIsIl90aGlzMiIsIl90aGlzMyIsInF1ZXJ5U2VsZWN0b3IiLCJvbmNsaWNrIiwiY2xvc2UiLCJlIiwidGFyZ2V0IiwibmFtZSIsIl90aGlzNCIsIm9uY2UiLCJhc3NpZ24iLCJhcHBlbmQiLCJiaW5kRXZlbnQiLCJzdHlsZSIsImFuaW1hdGlvbkR1cmF0aW9uIiwic2V0VGltZW91dCIsImNsYXNzTGlzdCIsImFkZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmUiLCJzdHIiLCJ0ZW1wbGF0ZSIsImNyZWF0ZUVsZW1lbnQiLCJ0cmltIiwiaW5uZXJIVE1MIiwiZmlyc3RDaGlsZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7d29CQWFBLElBQU1BLFlBQWMsQ0FDaEJDLFFBQVMsS0FDVEMsT0FBUSxNQUdOQyxhQUFlLENBQ2pCRixRQUFTLFVBQ1RDLE9BQVEsVUFDUkUsTUFBTyxTQUNQQyxRQUFTLFNBQ1RDLFNBQVUsV0FDVkMsS0FBTSxTQUNOQyxVQUFXLFVBR1RDLG9CQUlGLFNBQUFBLEVBQVlDLEdBQWtCQyxnQkFBQUMsS0FBQUgsR0FDMUJHLEtBQUtDLG1CQUFtQkgsR0FBWSwyREFHdEJJLEdBQWMsSUFBQUMsRUFBQUgsS0FDNUJJLE9BQU9DLFFBQVFILEdBQVFJLElBQUksU0FBQ0MsR0FDeEIsSUFBTUMsRUFBTUQsRUFBSSxHQUNWRSxFQUFRRixFQUFJLEdBQ2xCLEdBQXFCLFdBQWpCRyxRQUFPRCxHQUNQTixFQUFLUSxVQUFVRixPQUNaLENBQ0gsSUFBTUcsRUFBT3JCLGFBQWFpQixHQUMxQixHQUFJRSxRQUFPRCxLQUFVRyxFQUNqQixLQUFBLEdBQUFDLE9BQVNKLEVBQVQsTUFBQUksT0FBbUJELEVBQW5CLCtDQU1DZCxHQUNiLElBQUlULEVBQVUsR0FDVkMsRUFBUyxHQUNUUSxFQUFTVCxVQUNUQSxFQUFPLHdDQUFBd0IsT0FBMkNmLEVBQVNULFFBQVFNLE1BQVFQLFlBQVlDLFFBQWhGLGNBRVBTLEVBQVNSLFNBQ1RBLEVBQU0sdUNBQUF1QixPQUEwQ2YsRUFBU1IsT0FBT0ssTUFBUVAsWUFBWUUsT0FBOUUsY0FFVixJQUFNd0IsRUFBTSw0TkFBQUQsT0FJMkJmLEVBQVNOLE1BSnBDLDREQUFBcUIsT0FLOEJmLEVBQVNMLFFBTHZDLHlEQUFBb0IsT0FNMkJ4QixHQU4zQndCLE9BTXFDdkIsRUFOckMsd0pBWVosT0FBT08sRUFBU2tCLGNBQWNELGtDQVVuQmhCLEdBQ1gsSUFBTWtCLEVBQU9DLFNBQVNELEtBQ3RCaEIsS0FBS2tCLFFBQVVsQixLQUFLbUIsU0FBU3JCLEdBQzdCa0IsRUFBS0ksWUFBWXBCLEtBQUtrQixvREFHQ3BCLEdBQWtCLElBQUF1QixFQUFBckIsS0FDekNBLEtBQUtXLFVBQVViLEdBQ2ZFLEtBQUtrQixRQUFVLEtBQ2ZsQixLQUFLRixTQUFXLEdBQ2hCTSxPQUFPQyxRQUFRUCxHQUFVUSxJQUFJLFNBQUNDLEdBQzFCYyxFQUFLdkIsU0FBU1MsRUFBSSxJQUFNQSxFQUFJLHVDQUlsQlQsR0FBbUIsSUFBQXdCLEVBQUF0QixLQUNqQ0EsS0FBS2tCLFFBQVFLLGNBQWMscUJBQXFCQyxRQUFVLFdBQ3RERixFQUFLRyxTQUVUekIsS0FBS2tCLFFBQVFLLGNBQWMsc0JBQXNCQyxRQUFVLFNBQUNFLEdBRXhELE9BRGFBLEVBQUVDLE9BQU9DLE1BRWxCLElBQUssVUFDQTlCLEVBQVNULFFBQVFLLFVBQWNJLEVBQVNULFFBQVFLLFdBQ2pELE1BQ0osSUFBSyxTQUNBSSxFQUFTUixPQUFPSSxVQUFjSSxFQUFTUixPQUFPSSxXQUMvQzRCLEVBQUtHLHVDQU1UM0IsR0FBbUIsSUFBQStCLEVBQUE3QixLQUMzQixHQUFvQixPQUFqQkEsS0FBS2tCLFFBQWtCLENBQ3RCLElBQUlZLEVBQWlCMUIsT0FBTzJCLE9BQU8sR0FBSS9CLEtBQUtGLFVBQ3hDQSxJQUNBRSxLQUFLVyxVQUFVYixHQUNmTSxPQUFPQyxRQUFRUCxHQUFVUSxJQUFJLFNBQUNDLEdBQzFCLElBQU1DLEVBQU1ELEVBQUksR0FDVkUsRUFBUUYsRUFBSSxHQUNkc0IsRUFBSy9CLFNBQVNVLEtBQVNDLElBQ3ZCcUIsRUFBS3RCLEdBQU9DLE1BSXhCVCxLQUFLZ0MsT0FBT0YsR0FDWjlCLEtBQUtpQyxVQUFVSCxHQUVaQSxFQUFLbEMsWUFDSkksS0FBS2tCLFFBQVFLLGNBQWMsdUJBQXVCVyxNQUFNQyxrQkFBb0JMLEVBQUtsQyxVQUFZLElBQU8sSUFDcEd3QyxXQUFXLFdBQ1BQLEVBQUtKLFNBQ05LLEVBQUtsQyw2Q0FNaEIsSUFBTXNCLEVBQVVsQixLQUFLa0IsUUFDakJBLElBQ0FBLEVBQVFtQixVQUFVQyxJQUFJLFNBQ3RCcEIsRUFBUUssY0FBYyxtQkFBbUJnQixpQkFBaUIsZUFBZ0IsV0FDdEVyQixFQUFRc0IsV0FFWnhDLEtBQUtrQixRQUFVLDhDQXhFRnVCLEdBQ2pCLElBQU1DLEVBQVd6QixTQUFTMEIsY0FBYyxZQUd4QyxPQUZBRixFQUFNQSxFQUFJRyxPQUNWRixFQUFTRyxVQUFZSixFQUNkQyxFQUFTakQsUUFBUXFEIiwiZmlsZSI6InV4LWRpYWxvZy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbnRlcmZhY2UgQnV0dG9uIHtcclxuICAgIGNhbGxiYWNrPzogRnVuY3Rpb247XHJcbiAgICB0ZXh0Pzogc3RyaW5nO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgQ29udGVudHMge1xyXG4gICAgdGl0bGU/OiBzdHJpbmc7XHJcbiAgICBjb250ZW50Pzogc3RyaW5nIHwgTm9kZTtcclxuICAgIGNvbmZpcm0/OiBCdXR0b24gfCBudWxsO1xyXG4gICAgY2FuY2VsPzogQnV0dG9uIHwgbnVsbDtcclxuICAgIHNlbGZDbG9zZT86IG51bWJlcjtcclxufVxyXG5cclxuY29uc3QgZGVmYXVsdFRleHQgPSB7XHJcbiAgICBjb25maXJtOiAn7ZmV7J24JyxcclxuICAgIGNhbmNlbDogJ+y3qOyGjCdcclxufTtcclxuXHJcbmNvbnN0IGNvbnRlbnRzVHlwZSA9IHtcclxuICAgIGNvbmZpcm06ICdib29sZWFuJyxcclxuICAgIGNhbmNlbDogJ2Jvb2xlYW4nLFxyXG4gICAgdGl0bGU6ICdzdHJpbmcnLFxyXG4gICAgY29udGVudDogJ3N0cmluZycsXHJcbiAgICBjYWxsYmFjazogJ2Z1bmN0aW9uJyxcclxuICAgIHRleHQ6ICdzdHJpbmcnLFxyXG4gICAgc2VsZkNsb3NlOiAnbnVtYmVyJ1xyXG59O1xyXG5cclxuY2xhc3MgVXhEaWFsb2cge1xyXG4gICAgcHJpdmF0ZSBlbGVtZW50OiBhbnk7XHJcbiAgICBwcml2YXRlIGNvbnRlbnRzOiBDb250ZW50cztcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihjb250ZW50czogQ29udGVudHMpIHtcclxuICAgICAgICB0aGlzLmdldERlZmF1bHRDb250ZW50cyhjb250ZW50cyB8fCB7fSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjaGVja1R5cGUob2JqZWN0OiBvYmplY3QpOiB2b2lkIHtcclxuICAgICAgICBPYmplY3QuZW50cmllcyhvYmplY3QpLm1hcCgodmFsKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IHZhbFswXTtcclxuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB2YWxbMV07XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrVHlwZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0eXBlID0gY29udGVudHNUeXBlW2tleV07XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSB0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgYCR7dmFsdWV964qUICR7dHlwZX3snbQg7JWE64uZ64uI64ukLmBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgbWFrZU5vZGUoY29udGVudHM6IENvbnRlbnRzKTogYW55IHtcclxuICAgICAgICBsZXQgY29uZmlybSA9ICcnO1xyXG4gICAgICAgIGxldCBjYW5jZWwgPSAnJztcclxuICAgICAgICBpZiAoY29udGVudHMuY29uZmlybSkge1xyXG4gICAgICAgICAgICBjb25maXJtID0gYDxidXR0b24gbmFtZT1cImNvbmZpcm1cIiB0eXBlPVwiYnV0dG9uXCI+JHtjb250ZW50cy5jb25maXJtLnRleHQgfHwgZGVmYXVsdFRleHQuY29uZmlybX08L2J1dHRvbj5gXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjb250ZW50cy5jYW5jZWwpIHtcclxuICAgICAgICAgICAgY2FuY2VsID0gYDxidXR0b24gbmFtZT1cImNhbmNlbFwiIHR5cGU9XCJidXR0b25cIj4ke2NvbnRlbnRzLmNhbmNlbC50ZXh0IHx8IGRlZmF1bHRUZXh0LmNhbmNlbH08L2J1dHRvbj5gXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGRpYWxvZyA9IGBcclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJ1eC1kaWFsb2dcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInV4LWRpYWxvZy0tY29udGVudFwiPlxyXG4gICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwidXgtZGlhbG9nLS1jbG9zZVwiPnRoaXMgZGlhbG9nIGNsb3NlPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInV4LWRpYWxvZy0taGVhZGVyXCI+JHtjb250ZW50cy50aXRsZX08L2Rpdj5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidXgtZGlhbG9nLS1jb250YWluZXJcIj4ke2NvbnRlbnRzLmNvbnRlbnR9PC9kaXY+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInV4LWRpYWxvZy0tZm9vdGVyXCI+JHtjb25maXJtfSR7Y2FuY2VsfTwvZGl2PlxyXG4gICAgICAgICAgICAgIDxpIGNsYXNzPVwidXgtZGlhbG9nLS1sb2FkaW5nXCI+PC9pPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGkgY2xhc3M9XCJ1eC1kaWFsb2ctLWRpbVwiPjwvaT5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIGA7XHJcbiAgICAgICAgcmV0dXJuIFV4RGlhbG9nLmh0bWxUb0VsZW1lbnQoZGlhbG9nKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgaHRtbFRvRWxlbWVudChzdHI6IHN0cmluZyk6IGFueSB7XHJcbiAgICAgICAgY29uc3QgdGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScpO1xyXG4gICAgICAgIHN0ciA9IHN0ci50cmltKCk7IFxyXG4gICAgICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IHN0cjtcclxuICAgICAgICByZXR1cm4gdGVtcGxhdGUuY29udGVudC5maXJzdENoaWxkO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXBwZW5kKGNvbnRlbnRzOiBDb250ZW50cykge1xyXG4gICAgICAgIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5ib2R5O1xyXG4gICAgICAgIHRoaXMuZWxlbWVudCA9IHRoaXMubWFrZU5vZGUoY29udGVudHMpO1xyXG4gICAgICAgIGJvZHkuYXBwZW5kQ2hpbGQodGhpcy5lbGVtZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldERlZmF1bHRDb250ZW50cyhjb250ZW50czogQ29udGVudHMpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmNoZWNrVHlwZShjb250ZW50cyk7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gbnVsbDtcclxuICAgICAgICB0aGlzLmNvbnRlbnRzID0ge307XHJcbiAgICAgICAgT2JqZWN0LmVudHJpZXMoY29udGVudHMpLm1hcCgodmFsKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGVudHNbdmFsWzBdXSA9IHZhbFsxXTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGJpbmRFdmVudChjb250ZW50cz86IENvbnRlbnRzKSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy51eC1kaWFsb2ctLWNsb3NlJykub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy51eC1kaWFsb2ctLWZvb3RlcicpLm9uY2xpY2sgPSAoZSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBuYW1lID0gZS50YXJnZXQubmFtZTtcclxuICAgICAgICAgICAgc3dpdGNoKG5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2NvbmZpcm0nOlxyXG4gICAgICAgICAgICAgICAgICAgIChjb250ZW50cy5jb25maXJtLmNhbGxiYWNrKSAmJiAoY29udGVudHMuY29uZmlybS5jYWxsYmFjaygpKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2NhbmNlbCc6XHJcbiAgICAgICAgICAgICAgICAgICAgKGNvbnRlbnRzLmNhbmNlbC5jYWxsYmFjaykgJiYgKGNvbnRlbnRzLmNhbmNlbC5jYWxsYmFjaygpKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9wZW4oY29udGVudHM/OiBDb250ZW50cyk6IHZvaWQge1xyXG4gICAgICAgIGlmKHRoaXMuZWxlbWVudCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICBsZXQgb25jZTogQ29udGVudHMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmNvbnRlbnRzKTtcclxuICAgICAgICAgICAgaWYgKGNvbnRlbnRzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrVHlwZShjb250ZW50cyk7XHJcbiAgICAgICAgICAgICAgICBPYmplY3QuZW50cmllcyhjb250ZW50cykubWFwKCh2YWwpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSB2YWxbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB2YWxbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29udGVudHNba2V5XSAhPT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb25jZVtrZXldID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5hcHBlbmQob25jZSk7XHJcbiAgICAgICAgICAgIHRoaXMuYmluZEV2ZW50KG9uY2UpO1xyXG5cclxuICAgICAgICAgICAgaWYob25jZS5zZWxmQ2xvc2UpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcudXgtZGlhbG9nLS1sb2FkaW5nJykuc3R5bGUuYW5pbWF0aW9uRHVyYXRpb24gPSBvbmNlLnNlbGZDbG9zZSAvIDEwMDAgKyAncyc7XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICB9LCBvbmNlLnNlbGZDbG9zZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsb3NlKCk6dm9pZCB7XHJcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMuZWxlbWVudDtcclxuICAgICAgICBpZiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2Nsb3NlJyk7XHJcbiAgICAgICAgICAgIGVsZW1lbnQucXVlcnlTZWxlY3RvcignLnV4LWRpYWxvZy0tZGltJykuYWRkRXZlbnRMaXN0ZW5lcignYW5pbWF0aW9uZW5kJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5yZW1vdmUoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudCA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4iXX0=
