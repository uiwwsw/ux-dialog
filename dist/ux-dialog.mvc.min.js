/*
 MIT License. 
 ux-dialog v0.1.6
 author: uiwwsw
 homepage:https://github.com/uiwwsw/ux-dialog#readme
 */ "use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var defaultText={confirm:"확인",cancel:"취소"},contentsType={confirm:"boolean",cancel:"boolean",title:"string",content:"string",callback:"function",text:"string",selfClose:"number",closeKey:"number",cancelKey:"number",confirmKey:"number"},UxDialog=function(){function c(e){_classCallCheck(this,c),this.getDefaultContents(e||{})}return _createClass(c,[{key:"checkType",value:function(e){var c=this;Object.entries(e).map(function(e){var t=e[0],n=e[1];if("object"===_typeof(n))c.checkType(n);else{var o=contentsType[t];if(_typeof(n)!==o)throw"".concat(n,"는 ").concat(o,"이 아닙니다.")}})}},{key:"makeNode",value:function(e){var t="",n="";e.confirm&&(t='<button name="confirm" type="button">'.concat(e.confirm.text||defaultText.confirm,"</button>")),e.cancel&&(n='<button name="cancel" type="button">'.concat(e.cancel.text||defaultText.cancel,"</button>"));var o='\n          <div class="ux-dialog">\n            <div class="ux-dialog--content">\n              <button type="button" class="ux-dialog--close">this dialog close</button>\n              <div class="ux-dialog--header">'.concat(e.title,'</div>\n              <div class="ux-dialog--container">').concat(e.content,'</div>\n              <div class="ux-dialog--footer">').concat(t).concat(n,'</div>\n              <i class="ux-dialog--loading"></i>\n            </div>\n            <i class="ux-dialog--dim"></i>\n          </div>\n        ');return c.htmlToElement(o)}},{key:"append",value:function(e){var t=document.body;this.element=this.makeNode(e),t.appendChild(this.element)}},{key:"getDefaultContents",value:function(e){var t=this;this.checkType(e),this.element=null,this.contents={},Object.entries(e).map(function(e){t.contents[e[0]]=e[1]})}},{key:"bindEvent",value:function(t){var n=this;window.onkeyup=function(e){console.log(e.keyCode),t.closeKey===e.keyCode&&n.close(),t.cancelKey&&(t.cancel.callback&&t.cancel.callback(),n.close()),t.confirmKey&&t.confirm.callback&&t.confirm.callback()},this.element.querySelector(".ux-dialog--close").onclick=function(){n.close()},this.element.querySelector(".ux-dialog--footer").onclick=function(e){switch(e.target.name){case"confirm":t.confirm.callback&&t.confirm.callback();break;case"cancel":t.cancel.callback&&t.cancel.callback(),n.close()}}}},{key:"open",value:function(e){var o=this;if(null===this.element){var c=Object.assign({},this.contents);e&&(this.checkType(e),Object.entries(e).map(function(e){var t=e[0],n=e[1];o.contents[t]!==n&&(c[t]=n)})),this.append(c),this.bindEvent(c),c.selfClose&&(clearTimeout(this.sto),this.element.querySelector(".ux-dialog--loading").style.animationDuration=c.selfClose/1e3+"s",this.sto=setTimeout(function(){o.close()},c.selfClose))}}},{key:"close",value:function(){var e=this.element;e&&(e.classList.add("close"),e.querySelector(".ux-dialog--dim").addEventListener("animationend",function(){e.remove()}),this.element=null)}}],[{key:"htmlToElement",value:function(e){var t=document.createElement("template");return e=e.trim(),t.innerHTML=e,t.content.firstChild}}]),c}(),_default=UxDialog;exports.default=_default;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
